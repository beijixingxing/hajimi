name: Docker镜像构建及上游同步

on:
  push:
    branches: [main]
    tags: ['v*.*.*']
  schedule:
    - cron: '0 * * * *'
  workflow_dispatch:

jobs:
  sync-fork:
    name: 上游仓库同步
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    outputs:
      should_build: ${{ steps.build_control.outputs.should_build }}
    
    steps:
      - name: 检出仓库
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 配置Git身份
        run: |
          git config user.name "beijixingxing"
          git config user.email "yunxi815@gmail.com"
          
      - name: 备份工作流文件
        run: |
          mkdir -p /tmp/workflow_backup
          cp -v .github/workflows/*.yml /tmp/workflow_backup/ || true
          echo "已备份工作流文件："
          ls -l /tmp/workflow_backup/

      - name: 版本检测
        id: version_check
        run: |
          CURRENT_VERSION=$(sed -n 's/.*version\s*=\s*["'']*\([0-9]\+\.[0-9]\+\.[0-9]\+\).*/\1/p' version.txt)
          if [ -z "$CURRENT_VERSION" ]; then
            echo "::error::无法读取当前版本！文件内容："
            cat version.txt
            exit 1
          fi
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          UPSTREAM_RAW=$(curl --retry 3 --max-time 10 -fsSL https://raw.githubusercontent.com/wyeeeee/hajimi/main/version.txt || echo "")
          UPSTREAM_VERSION=$(echo "$UPSTREAM_RAW" | sed -n 's/.*version\s*=\s*["'']*\([0-9]\+\.[0-9]\+\.[0-9]\+\).*/\1/p')
          echo "upstream_version=$UPSTREAM_VERSION" >> $GITHUB_OUTPUT

      - name: 版本比对
        id: compare
        run: |
          if [ -z "${{ steps.version_check.outputs.upstream_version }}" ]; then
            echo "::error::无法获取上游版本，跳过同步"
            echo "need_sync=false" >> $GITHUB_OUTPUT
          elif [ "${{ steps.version_check.outputs.current_version }}" != "${{ steps.version_check.outputs.upstream_version }}" ]; then
            echo "need_sync=true" >> $GITHUB_OUTPUT
            echo "::notice::版本变更 ${{ steps.version_check.outputs.current_version }} → ${{ steps.version_check.outputs.upstream_version }}"
          else
            echo "need_sync=false" >> $GITHUB_OUTPUT
          fi

      - name: 强制同步
        if: steps.compare.outputs.need_sync == 'true'
        run: |
          git remote add upstream https://github.com/wyeeeee/hajimi.git || true
          git fetch --unshallow upstream
          git reset --hard upstream/main
          echo "✅ 代码同步完成"

      - name: 恢复工作流
        if: steps.compare.outputs.need_sync == 'true'
        run: |
          cp -v /tmp/workflow_backup/*.yml .github/workflows/
          git add .github/workflows/
          if ! git commit -m "恢复工作流文件"; then
            echo "::warning::无工作流文件变更，跳过提交"
          fi
          git push origin main --force-with-lease
          echo "🔄 工作流恢复完成"

      - name: 构建控制
        id: build_control
        run: |
          should_build=false
          if [[ "${{ github.event_name }}" == "workflow_dispatch" || "${{ github.event_name }}" == "push" ]]; then
            should_build=true
          elif [[ "${{ github.event_name }}" == "schedule" && "${{ steps.compare.outputs.need_sync }}" == "true" ]]; then
            should_build=true
          fi
          echo "should_build=$should_build" >> $GITHUB_OUTPUT

  build-and-push:
    name: 构建推送镜像
    needs: sync-fork
    runs-on: ubuntu-latest
    if: ${{ needs.sync-fork.outputs.should_build == 'true' }}
    permissions:
      contents: read
      packages: write

    steps:
      - name: 获取最新代码
        uses: actions/checkout@v4
        with:
          ref: ${{ github.sha }}
          path: src
          fetch-depth: 0
          sparse-checkout: |
            /*
            !/.github

      - name: 验证构建环境
        run: |
          cd src
          echo "📁 文件结构验证："
          ls -l
          echo "🗒️ version.txt校验："
          grep -P 'version\s*=\s*[0-9]+\.[0-9]+\.[0-9]+' version.txt || {
            echo "::error::无效版本文件！"
            exit 1
          }

      - name: 生成版本变量
        id: version
        run: |
          cd src
          RAW_VERSION=$(sed -n 's/.*version\s*=\s*["'']*\([0-9]\+\.[0-9]\+\.[0-9]\+\).*/\1/p' version.txt)
          echo "version=v$RAW_VERSION" >> $GITHUB_OUTPUT
          echo "🏷️ 生成镜像版本：v$RAW_VERSION"

      - name: 准备构建上下文
        run: |
          rm -rf docker_build
          mkdir -p docker_build
          echo "📦 复制构建文件："
          for file in src/Dockerfile src/version.txt; do
            [ -f "$file" ] || { echo "::error::$file 不存在！"; exit 1; }
            cp -v "$file" docker_build/
          done
          [ -d src/app ] && cp -rv src/app docker_build/
          [ -f src/requirements.txt ] && cp -v src/requirements.txt docker_build/
          echo "✅ 构建文件就绪："
          ls -lR docker_build

      - name: 配置构建环境
        uses: docker/setup-buildx-action@v3
        with:
          install: true

      - name: 登录Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: 生成镜像标签
        id: tags
        uses: docker/metadata-action@v5
        with:
          images: beijixingxing/hajimi
          tags: |
            type=raw,value=latest
            type=raw,value=${{ steps.version.outputs.version }}
          flavor: |
            latest=false

      - name: 构建推送镜像
        uses: docker/build-push-action@v5
        with:
          context: docker_build
          file: docker_build/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.tags.outputs.tags }}
          labels: ${{ steps.tags.outputs.labels }}
          no-cache: true
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: 镜像内容验证
        timeout-minutes: 5
        run: |
          echo "🔍 验证镜像内容..."
          docker pull beijixingxing/hajimi:${{ steps.version.outputs.version }}
          docker run --rm beijixingxing/hajimi:${{ steps.version.outputs.version }} \
            sh -c 'echo "镜像内部版本: $(cat /app/version.txt)" && \
            grep -q "version=${{ steps.version.outputs.version#v}}" /app/version.txt' || {
              echo "::error::镜像版本不匹配！"
              exit 1
            }
          echo "✅ 版本验证通过"

name: Docker镜像构建及上游同步

on:
  push:
    branches: [main]
    tags: ['v*.*.*']
  schedule:
    - cron: '0 3 * * *'  # 每天UTC时间3点（北京时间11点）
  workflow_dispatch:

jobs:
  sync-fork:
    name: 上游仓库同步
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    outputs:
      should_build: ${{ steps.build_control.outputs.should_build }}
    
    steps:
      - name: 检出仓库
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 配置Git身份
        run: |
          git config user.name "beijixingxing"
          git config user.email "yunxi815@gmail.com"
          
      - name: 备份工作流文件
        run: |
          mkdir -p .github/workflows/backup
          cp -v .github/workflows/*.yml .github/workflows/backup/
          echo "🔄 已备份工作流文件到 .github/workflows/backup"

      - name: 获取版本信息
        timeout-minutes: 5
        env:
          RETRY_COUNT: 3
        run: |
          # 带重试机制的版本获取
          for i in $(seq 1 $RETRY_COUNT); do
            CURRENT_VERSION=$(grep -oP 'version\s*=\s*["\x27]?\K[0-9]+\.[0-9]+\.[0-9]+' version.txt) && break
            sleep 2
            echo "重试获取版本 ($i/$RETRY_COUNT)..."
          done
          [ -z "$CURRENT_VERSION" ] && { echo "::error::无法提取当前版本"; exit 1; }
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT

          # 获取上游版本（带超时和重试）
          UPSTREAM_RAW=$(curl --retry 3 --max-time 10 -fsSL https://raw.githubusercontent.com/wyeeeee/hajimi/main/version.txt)
          UPSTREAM_VERSION=$(echo "$UPSTREAM_RAW" | grep -oP 'version\s*=\s*["\x27]?\K[0-9]+\.[0-9]+\.[0-9]+')
          echo "upstream_version=$UPSTREAM_VERSION" >> $GITHUB_OUTPUT

      - name: 版本比对
        run: |
          echo "🔍 版本比对：本地[${{ steps.current_version.outputs.current_version }}] vs 上游[${{ steps.upstream_version.outputs.upstream_version }}]"
          if [[ "${{ steps.current_version.outputs.current_version }}" != "${{ steps.upstream_version.outputs.upstream_version }}" ]]; then
            echo "need_sync=true" >> $GITHUB_OUTPUT
            echo "::notice::检测到新版本，需要同步"
          else
            echo "need_sync=false" >> $GITHUB_OUTPUT
            echo "::notice::版本一致，无需同步"
          fi

      - name: 执行同步
        if: steps.version_check.outputs.need_sync == 'true'
        run: |
          git remote add upstream https://github.com/wyeeeee/hajimi.git || true
          git fetch upstream main --depth=1
          git reset --hard upstream/main
          echo "🔄 强制同步完成"

      - name: 恢复工作流配置
        if: steps.version_check.outputs.need_sync == 'true'
        run: |
          cp -v .github/workflows/backup/*.yml .github/workflows/
          git add .github/workflows/
          git commit -m "恢复自定义工作流配置" || echo "⚠️ 无工作流文件变更"
          git push origin main --force-with-lease
          echo "✅ 工作流配置恢复完成"

      - name: 构建控制
        id: build_control
        run: |
          # 调试信息
          echo "触发事件：${{ github.event_name }}"
          echo "是否需要同步：${{ steps.version_check.outputs.need_sync }}"

          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "should_build=true" >> $GITHUB_OUTPUT
            echo "🎯 手动触发构建"
          elif [[ "${{ github.event_name }}" == "push" ]]; then
            echo "should_build=true" >> $GITHUB_OUTPUT
            echo "🎯 代码推送触发构建"
          elif [[ "${{ github.event_name }}" == "schedule" && "${{ steps.version_check.outputs.need_sync }}" == "true" ]]; then
            echo "should_build=true" >> $GITHUB_OUTPUT
            echo "🎯 定时任务触发构建"
          else
            echo "should_build=false" >> $GITHUB_OUTPUT
            echo "⏸️ 不满足构建条件"
          fi

  build-and-push:
    name: 构建推送镜像
    needs: sync-fork
    runs-on: ubuntu-latest
    if: ${{ needs.sync-fork.outputs.should_build == 'true' }}
    permissions:
      contents: read
      packages: write

    steps:
      - name: 获取同步后的代码
        uses: actions/checkout@v4
        with:
          ref: ${{ github.sha }}
          path: src
          clean: true
          fetch-depth: 0

      - name: 验证版本文件
        run: |
          cd src
          echo "🔍 当前版本文件内容："
          cat version.txt
          if ! grep -qP 'version\s*=\s*[0-9]+\.[0-9]+\.[0-9]+' version.txt; then
            echo "::error::版本格式无效！"
            exit 1
          fi

      - name: 生成版本变量
        id: version
        run: |
          cd src
          RAW_VERSION=$(grep -oP 'version\s*=\s*"\K[0-9]+\.[0-9]+\.[0-9]+' version.txt)
          echo "version=v${RAW_VERSION}" >> $GITHUB_OUTPUT
          echo "raw_version=${RAW_VERSION}" >> $GITHUB_OUTPUT
          echo "🏷️ 生成镜像标签：v$RAW_VERSION"

      - name: 准备构建环境
        run: |
          rm -rf docker_build
          mkdir -p docker_build
          echo "📦 复制构建文件："
          cp -v src/Dockerfile docker_build/
          cp -v src/version.txt docker_build/
          [ -d src/app ] && cp -rv src/app/ docker_build/app/
          [ -f src/requirements.txt ] && cp -v src/requirements.txt docker_build/
          echo "✅ 构建文件清单："
          tree docker_build

      - name: 配置构建工具
        uses: docker/setup-buildx-action@v3
        with:
          driver: docker-container
          platforms: linux/amd64,linux/arm64

      - name: 登录Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: 生成镜像元数据
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: beijixingxing/hajimi
          tags: |
            type=raw,value=latest
            type=raw,value=${{ steps.version.outputs.version }}
          flavor: |
            latest=false

      - name: 构建推送镜像
        uses: docker/build-push-action@v5
        with:
          context: docker_build
          file: docker_build/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          no-cache: true
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: 验证镜像内容
        timeout-minutes: 5
        run: |
          echo "🔍 镜像验证："
          docker pull beijixingxing/hajimi:${{ steps.version.outputs.version }}
          docker run --rm beijixingxing/hajimi:${{ steps.version.outputs.version }} \
            sh -c 'echo "镜像内部版本：$(cat /app/version.txt)" && \
            grep -q "version=${{ steps.version.outputs.raw_version }}" /app/version.txt'
          echo "✅ 版本验证通过"
